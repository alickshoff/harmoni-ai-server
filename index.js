// index.js ‚Äî –°–µ—Ä–≤–µ—Ä –¥–ª—è Harmoni AI (Node.js + Express)
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const axios = require('axios');

const app = express();

// –ü–æ—Ä—Ç: –æ—Ç Render –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ 5000
const PORT = process.env.PORT || 5000;

// Middleware
app.use(cors({
  origin: '*' // –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å: ['https://your-app.com']
}));
app.use(express.json({ limit: '10mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç: /chat ---
app.post('/chat', async (req, res) => {
  try {
    const { messages } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!messages || !Array.isArray(messages)) {
      return res.status(400).json({
        error: '–ü–æ–ª–µ "messages" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'
      });
    }

    if (messages.length === 0) {
      return res.status(400).json({
        error: '–ú–∞—Å—Å–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
      });
    }

    // –ó–∞–ø—Ä–æ—Å –∫ OpenAI
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo',
        messages: messages,
        max_tokens: 300,
        temperature: 0.7,
        presence_penalty: 0,
        frequency_penalty: 0.5
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        timeout: 15000 // 15 —Å–µ–∫—É–Ω–¥
      }
    );

    // –û—Ç–≤–µ—Ç –æ—Ç OpenAI
    const aiMessage = response.data.choices[0]?.message;

    if (!aiMessage) {
      throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò');
    }

    res.json({ choices: [{ message: aiMessage }] });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /chat:', error.message);

    // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫
    if (error.code === 'ECONNABORTED') {
      return res.status(504).json({ error: '–¢–∞–π–º–∞—É—Ç: –ò–ò –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è' });
    }

    if (error.response) {
      // –û—à–∏–±–∫–∏ –æ—Ç OpenAI (400, 401, 429 –∏ —Ç.–¥.)
      const status = error.response.status;
      const message = error.response.data.error?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ OpenAI';

      return res.status(status).json({ error: `OpenAI: ${message}` });
    }

    res.status(500).json({
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: error.message
    });
  }
});

// --- –≠–Ω–¥–ø–æ–∏–Ω—Ç: /health (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏) ---
app.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    message: '–°–µ—Ä–≤–µ—Ä Harmoni —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    timestamp: new Date().toISOString()
  });
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 ---
app.use('*', (req, res) => {
  res.status(404).json({ error: '–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(PORT, '0.0.0.0', () => {
  console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üí° –î–æ—Å—Ç—É–ø: http://localhost:${PORT}/health`);
});

// --- –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
module.exports = app;

